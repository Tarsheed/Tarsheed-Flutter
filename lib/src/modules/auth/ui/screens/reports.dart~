import 'package:flutter/material.dart';
import '../../../../../generated/l10n.dart';
import '../widgets/appbar.dart';
import '../widgets/bottomNavigatorBar.dart';
import '../widgets/large_button.dart';
import '../widgets/month_navigaion.dart';
import '../widgets/report_large_card.dart';
import '../widgets/select_time_period.dart';

class ReportsPage extends StatefulWidget {
  const ReportsPage({Key? key}) : super(key: key);

  @override
  _ReportsPageState createState() => _ReportsPageState();
}

class _ReportsPageState extends State<ReportsPage> {
  final List<String> _periods = ['Today', 'Week', 'Month', 'Years'];
  int _selectedPeriodIndex = 1;

  // بيانات الرسم البياني
  final List<double> _chartData = [15, 145, 60, 90, 75, 40, 95, 135, 110, 200];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      bottomNavigationBar: BottomNavigator(),
      appBar: CustomAppBar(text: S.of(context).Reports),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(12.0),
          child: Column(
            children: [
              PeriodFilter(
                periods: _periods,
                initialSelectedIndex: _selectedPeriodIndex,
                onPeriodChanged: (index) {
                  setState(() {
                    _selectedPeriodIndex = index;
                  });
                },
              ),
              // كارت الاستخدام الشهري مع الرسم البياني
              _buildMonthlyUsageCard(),
              SizedBox(
                height: 10,
              ),
              MonthNavigator(),
              BuildInfoCard(
                icon: Icons.show_chart,
                title: 'Avg Usage',
                value: '62.85kWh',
                percentage: '10%',
                isDecrease: true,
                color: Colors.blue,
              ),
              const SizedBox(height: 10),
              BuildInfoCard(
                icon: Icons.attach_money,
                title: 'Avg Cost',
                value: '\$125.5',
                percentage: '12%',
                isDecrease: true,
                color: Colors.blue,
              ),
              const SizedBox(height: 10),
              // استخدام الشهر الماضي والقادم
              _buildUsageComparisonCards(),
              const SizedBox(height: 10),
<<<<<<< HEAD:lib/src/modules/auth/ui/screens/reports.dart~

              // زر النظام منخفض التكلفة
              DefaultButton(
                title: "You are now on the low-tier system",
=======
              LargeButton(
                textB: "You are now on the low-tier system",
>>>>>>> 162f00d (edit on reports page (month navigation , filter period)):lib/src/modules/auth/ui/screens/reports.dart
              )
            ],
          ),
        ),
      ),
    );
  }

  // بناء كارت الاستخدام الشهري مع الرسم البياني المخصص
  Widget _buildMonthlyUsageCard() {
    return Card(
      color: Colors.white,
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Monthly Usage',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 20),
            SizedBox(
              height: 200,
              child: CustomLineChart(
                data: _chartData,
                maxY: 200,
                labels: List.generate(10, (i) => (i + 1).toString()),
              ),
            ),
            const SizedBox(height: 8),
            const Row(
              children: [
                Text(
                  'kWh',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 14,
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

// بناء كاردات مقارنة الاستخدام (الشهر الماضي والقادم)
Widget _buildUsageComparisonCards() {
  return Row(
    children: [
      Expanded(
        child: Card(
          color: Colors.white,
          elevation: 2,
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          child: Padding(
            padding: const EdgeInsets.all(12.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                const Text(
                  'Last Month Usage',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 14,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  '146.85 kWh',
                  style: TextStyle(
                    color: Colors.blue,
                    fontWeight: FontWeight.bold,
                    fontSize: 16,
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
      const SizedBox(width: 12),
      Expanded(
        child: Card(
          elevation: 2,
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
          child: Padding(
            padding: const EdgeInsets.all(12.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                const Text(
                  'Next Month Usage',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 14,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  '146.85 kWh',
                  style: TextStyle(
                    color: Colors.blue,
                    fontWeight: FontWeight.bold,
                    fontSize: 16,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  'Projected based on your usage history',
                  style: TextStyle(
                    color: Colors.grey.shade600,
                    fontSize: 10,
                  ),
                  textAlign: TextAlign.center,
                ),
              ],
            ),
          ),
        ),
      ),
    ],
  );
}

// رسم بياني مخصص بدون استخدام أي مكتبة خارجية
class CustomLineChart extends StatelessWidget {
  final List<double> data;
  final double maxY;
  final List<String> labels;

  const CustomLineChart({
    Key? key,
    required this.data,
    required this.maxY,
    required this.labels,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        return Column(
          children: [
            Expanded(
              child: CustomPaint(
                size: Size(constraints.maxWidth, constraints.maxHeight * 0.9),
                painter: LineChartPainter(
                  data: data,
                  maxY: maxY,
                  labels: labels,
                ),
              ),
            ),
            Container(
              height: constraints.maxHeight * 0.1,
              width: constraints.maxWidth,
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: labels.map((label) {
                  return Text(
                    label,
                    style: TextStyle(
                      fontSize: 10,
                      fontWeight: FontWeight.bold,
                    ),
                  );
                }).toList(),
              ),
            ),
          ],
        );
      },
    );
  }
}

class LineChartPainter extends CustomPainter {
  final List<double> data;
  final double maxY;
  final List<String> labels;

  LineChartPainter({
    required this.data,
    required this.maxY,
    required this.labels,
  });

  @override
  void paint(Canvas canvas, Size size) {
    // رسم خطوط الشبكة الأفقية
    final gridPaint = Paint()
      ..color = Colors.grey.withOpacity(0.3)
      ..strokeWidth = 1;

    final stepSize = size.height / 4;
    for (int i = 0; i <= 4; i++) {
      final y = size.height - (i * stepSize);
      canvas.drawLine(
        Offset(0, y),
        Offset(size.width, y),
        gridPaint,
      );
    }

    // رسم الخط البياني
    final linePaint = Paint()
      ..color = Colors.blue
      ..style = PaintingStyle.stroke
      ..strokeWidth = 3
      ..strokeCap = StrokeCap.round;

    final path = Path();
    final segmentWidth = size.width / (data.length - 1);

    for (int i = 0; i < data.length; i++) {
      final x = i * segmentWidth;
      final y = size.height - (data[i] / maxY * size.height);

      if (i == 0) {
        path.moveTo(x, y);
      } else {
        final prevX = (i - 1) * segmentWidth;
        final prevY = size.height - (data[i - 1] / maxY * size.height);

        // إنشاء منحنى بدلاً من خط مستقيم
        final controlX1 = prevX + segmentWidth / 2;
        final controlY1 = prevY;
        final controlX2 = x - segmentWidth / 2;
        final controlY2 = y;

        path.cubicTo(
          controlX1,
          controlY1,
          controlX2,
          controlY2,
          x,
          y,
        );
      }
    }

    canvas.drawPath(path, linePaint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    return true;
  }
}
